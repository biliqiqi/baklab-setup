# resolver 127.0.0.11 valid=10s;

upstream backend{
    server ${APP_LOCAL_HOST}:${APP_PORT};
}

# base on https://ssl-config.mozilla.org/#server=nginx&version=1.25.2&config=intermediate&openssl=3.0.9&guideline=5.7

map $host $redirect_to_base_domain {
    default 0;
    www.${ROOT_DOMAIN_NAME} 1;
    "~^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$" 1;
    "~^[0-9a-fA-F:]+$" 1;
}

server {
    listen 80 default_server;
    listen [::]:80 default_server;
    
    server_name ${ROOT_DOMAIN_NAME} www.${ROOT_DOMAIN_NAME};

{{if .SSL.Enabled}}
    if ($host = $redirect_to_base_domain) {
        return 301 https://${ROOT_DOMAIN_NAME}$request_uri;
    }

    location / {
        limit_req zone=one burst=20 nodelay;
        return 301 https://$host$request_uri;
    }

    # location /.well-known/acme-challenge/ {
    #     root /var/www/certbot;
    # }
{{else}}
    if ($host = $redirect_to_base_domain) {
        return 301 http://${ROOT_DOMAIN_NAME}$request_uri;
    }

    location / {
        limit_req zone=one burst=20 nodelay;
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    location /static {
        alias /data/static;
    }

    location /manage_static {
        alias /data/manage_static;
    }

    location /favicon.ico {
        alias /data/static/favicon.ico;
    }

    location /robots.txt {
        alias /data/static/robots.txt;
    }
{{end}}
}

{{if .SSL.Enabled}}
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    
    server_name ${ROOT_DOMAIN_NAME} www.${ROOT_DOMAIN_NAME};

    ssl_certificate /etc/ssl/certs/server.crt;
    ssl_certificate_key /etc/ssl/private/server.key;

    # intermediate configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off;

    # HSTS (ngx_http_headers_module is required) (63072000 seconds)
    add_header Strict-Transport-Security "max-age=63072000" always;

    if ($host = $redirect_to_base_domain) {
        return 301 https://${ROOT_DOMAIN_NAME}$request_uri;
    }

    location / {
        limit_req zone=one burst=20 nodelay;
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    location /static {
        alias /data/static;
    }

    location /manage_static {
        alias /data/manage_static;
    }

    location /favicon.ico {
        alias /data/static/favicon.ico;
    }

    location /robots.txt {
        alias /data/static/robots.txt;
    }
}
{{end}}

